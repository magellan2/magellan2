name: Create pre-release
# Test, build, and publish a release and tag it with "version-latest" on pushes to master

on:
  push:
    branches:
      - "master"

jobs:
  build:
    name: Create pre-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: Generate version string
      id: get-version
      run: |
        VERSION=$(ant -q -S print_version)
        SHORT=$(echo "${VERSION}" | cut -d. -f-2)
        BUILD=$(cat .build.number | grep build.number | cut -f2 -d"=")
        echo "BUILD=$BUILD" >> $GITHUB_OUTPUT
        echo "SHORT=$SHORT" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=$(echo "v${SHORT}-latest")" >> $GITHUB_OUTPUT

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Sanity check
      id: sanity_check
      run: |
        # env
        BUILD=${{ steps.get-version.outputs.BUILD }}
        SHORT=${{ steps.get-version.outputs.SHORT }}
        VERSION=${{ steps.get-version.outputs.VERSION }}
        TAG=${{ steps.get-version.outputs.TAG }}
        # tag is v1.2-latest
        if [[ "${TAG}" =~ ^v[0-9][0-9]*[.][0-9][0-9]*-latest$ ]]; then
          echo tag $TAG okay
        else
          echo "tag (${VERSION}, ${SHORT}) $TAG not okay!"
          exit 1
        fi

        # version is 1.2[.3]-567.latest,alpha, or beta
        if [[ "${VERSION}" =~ ^[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?-[0-9][0-9]*[.](latest|alpha|beta|rc)$ ]]; then
          echo version $VERSION okay
        else
          echo "version $VERSION not okay!"
          exit 1
        fi

        # most recent tag has older build number
        LASTTAG=$(git tag -l "v*" --sort='-committerdate' | head -1)
        OLDBUILD=$(git show ${LASTTAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
          if (( BUILD == OLDBUILD )); then
            echo "build.number $BUILD has not changed since most recent tag ${LASTTAG}, please update by running ant build locally!"
            exit 1
          fi
        else
          echo "bad tag or build $LASTTAG - $OLDBUILD"
        fi

        # last -latest tag has older build number
        OLDBUILD=$(git show ${TAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
          if (( BUILD <= OLDBUILD )); then
            echo "build.number $BUILD has not changed for tag ${TAG}, please update by running ant build locally!"
            exit 1
          fi
        else
          echo "Warning, previous build not found for ${TAG}!"
        fi

    - name: Test with ant
      run: |
         ant -noinput -buildfile build.xml run_tests
         fails=$(grep -L  "Failures: 0, Errors: 0" test/junit/TEST-*)
         if [ -n "$fails" ]; then
           echo Errors in $fails
           cat $fails
           exit 1
         fi
         skips=$(grep -L  "Skipped: 0" test/junit/TEST-*)
         if [ -n "$skips" ]; then
           echo "Skipped tests: "
           echo $skips
         fi
      # do not exit before all commands are executed
      shell: bash --noprofile --norc -o pipefail {0}

    - name: Build with ant
      env:
        INSTALL4J_KEY: ${{secrets.INSTALL4J_LICENSE_KEY_1}}
      run: |
        ant -noinput -buildfile build.xml distribute_install4j

    - name: Read RELEASENOTES and CHANGELOG
      id: changelog
      run: |
        value=$(cat doc/NIGHTLY.txt | iconv -f ISO-8859-1; echo -e '\n\n'; echo -e '\n## Excerpt from CHANGELOG.txt\n\n'; head -20 CHANGELOG.txt | iconv -f ISO-8859-1; echo -e '\n...\n' )
        value="${value//'%'/'%25'}"
        value="${value//$'\n'/'%0A'}"
        value="${value//$'\r'/'%0D'}"
        echo "BODY=$value" >> $GITHUB_OUTPUT

    - name: Publish git tag "vX.Y-latest"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${{ steps.get-version.outputs.TAG }}
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git remote -v
        # should we delete the old release and assets?
        # gh release delete ${TAG} -y || echo "continuing ..."
        git tag -f "${TAG}"
        REMOTE="https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
        git push --force "$REMOTE" "${TAG}"

    - name: prepare meta
      id: prepare-meta
      run: |
        set -x
        if [[ "${{ steps.get-version.outputs.TAG }}" =~ .*-([0-9]*[.])?([a-zA-Z][a-zA-Z]*).* ]]; then
          TYPE=$(echo ${{ steps.get-version.outputs.TAG }} | sed -e "s/.*-\([0-9]*[.]\)\?\([a-zA-Z][a-zA-Z]*\).*/\2/")
        else
          TYPE=stable
        fi
        if [[ ! "$TYPE" =~ ^[a-zA-Z]+$ ]]; then
          echo "invalid type $TYPE"
          exit 1
        fi
        echo "TYPE=$TYPE" >> $GITHUB_OUTPUT

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        target_commitish: master
        tag_name: ${{ steps.get-version.outputs.TAG }}
        prerelease: true
        name: Pre-Release v${{ steps.get-version.outputs.VERSION }} (${{ steps.prepare-meta.outputs.TYPE }})
        body: ${{ steps.changelog.outputs.BODY }}
        files: |
          LICENSE.txt
          README.md
          RELEASENOTES.txt
          CHANGELOG.txt
          VERSION
          installer/install4j/updates.xml
          magellan_v${{ steps.get-version.outputs.VERSION }}.zip
          Magellan_installer_windows-x64_v${{ steps.get-version.outputs.VERSION }}.exe
          Magellan_installer_unix_v${{ steps.get-version.outputs.VERSION }}.sh
          Magellan_installer_macos_v${{ steps.get-version.outputs.VERSION }}.dmg

    - name: trigger meta action
      run: |
        curl -sS -o meta.log \
          -X POST https://api.github.com/repos/${{ github.repository_owner }}/magellan2.github.io/dispatches \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: token ${{ secrets.META_REPO_ACCESS }}' \
          --data '{
            "event_type": "actions-release-trigger",
            "client_payload": {
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "caller_repository": "${{ github.repository }}",
              "meta_repository": "${{ github.repository_owner }}/magellan2.github.io",
              "tag": "${{ steps.get-version.outputs.TAG }}",
              "version": "${{ steps.get-version.outputs.VERSION }}",
              "type": "${{ steps.prepare-meta.outputs.TYPE }}" }}'
        if [ -s meta.log ]; then
          cat meta.log
          rm meta.log
          exit -1
        else
          echo "meta action apparently successful"
          rm meta.log
        fi
