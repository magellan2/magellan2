/*
 *  Copyright (C) 2000-2004 Roger Butenuth, Andreas Gampe,
 *                          Stefan Goetz, Sebastian Pappert,
 *                          Klaas Prause, Enno Rehling,
 *                          Sebastian Tusk, Ulrich Kuester,
 *                          Ilja Pavkovic
 *
 * This file is part of the Eressea Java Code Base, see the
 * file LICENSING for the licensing information applying to
 * this file.
 *
 */

package magellan.client.swing.context;

import java.awt.Cursor;
import java.awt.Frame;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import magellan.client.Client;
import magellan.client.event.EventDispatcher;
import magellan.client.event.SelectionEvent;
import magellan.client.extern.MagellanPlugIn;
import magellan.client.swing.AddSignDialog;
import magellan.client.swing.MapperPanel;
import magellan.client.swing.map.MapCellRenderer;
import magellan.client.swing.map.Mapper;
import magellan.client.swing.map.RenderingPlane;
import magellan.library.CoordinateID;
import magellan.library.GameData;
import magellan.library.HotSpot;
import magellan.library.ID;
import magellan.library.IntegerID;
import magellan.library.Region;
import magellan.library.event.GameDataEvent;
import magellan.library.utils.MagellanFactory;
import magellan.library.utils.Resources;
import magellan.library.utils.logging.Logger;


/**
 * A context menu for the map. Currently providing copy of the name and the coordinates of the
 * region.
 *
 * @author Ulrich Küster
 */
public class MapContextMenu extends JPopupMenu implements ContextObserver {

	private static final Logger log = Logger.getInstance(MapContextMenu.class);

	// the region on which the menu is inferred
	private Region region;
	private final EventDispatcher dispatcher;

	private final Client client;
	private GameData data;
	private final Properties settings;
	// FIXME (stm) should this class be a GameDataListener?
	private Map<CoordinateID,Region> selectedRegions = new Hashtable<CoordinateID,Region>();
	private Collection<Region> armystatsSel = new HashSet<Region>();
	private static final String RKEY = "MAGELLAN.RENDERER";
	private static final String TKEY = "MAGELLAN.TOOLTIP";
	protected JMenuItem name;
	protected JMenuItem changeSelState;
	protected JMenuItem copyNameID;
	protected JMenuItem setOriginItem;
	protected JMenuItem changeHotSpot;
	protected JMenu signs;
  protected JMenu levelSelect;
  protected JMenu jumpToHotSpot;
	protected JMenuItem armystats;
	protected JMenu renderer;
	protected JMenu tooltips;
	protected ActionListener rListener;
	protected ActionListener tListener;
	protected Mapper source;
	
	protected PathfinderMapContextMenu pathFinder;
  
  private Collection<MapContextMenuProvider> externalMapContectMenuProvider = null;

	/**
	 * Creates a new MapContextMenu object.
	 *
	 * @param aClient The client owning the menu
	 * @param aDispatcher The event dispatcher for events generated by this class
	 * @param settings The Properties for saving and getting settings 
	 */
	public MapContextMenu(Client aClient, EventDispatcher aDispatcher, Properties settings) {
		this.client = aClient;
		this.dispatcher = aDispatcher;
		this.settings = settings;

		//		this.client = client;
		rListener = new RendererActionListener();
		tListener = new TooltipActionListener();

		name = new JMenuItem();
		name.setEnabled(false);
		add(name);

		changeSelState = new JMenuItem(Resources.get("context.mapcontextmenu.menu.changeselectionstate"));
		changeSelState.setEnabled(false);
		changeSelState.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					changeSelectionState();
				}
			});
		add(changeSelState);

		copyNameID = new JMenuItem(Resources.get("context.mapcontextmenu.menu.copyidandname.caption"));
		copyNameID.setEnabled(false);
		copyNameID.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					copyNameID();
				}
			});
		add(copyNameID);

		setOriginItem = new JMenuItem(Resources.get("context.mapcontextmenu.menu.setorigin"));
		setOriginItem.setEnabled(false);
		setOriginItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

					CoordinateID c = new CoordinateID(region.getCoordinate());
					client.setOrigin(c);
					// client.setOrigin fires already the event..
					// dispatcher.fire(new GameDataEvent(this, data));
					setCursor(Cursor.getDefaultCursor());
				}
			});
		add(setOriginItem);

		changeHotSpot = new JMenuItem(Resources.get("context.mapcontextmenu.menu.changehotspot"));
		changeHotSpot.setEnabled(false);
		changeHotSpot.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					changeHotSpot();
				}
			});
		add(changeHotSpot);

		armystats = new JMenuItem(Resources.get("context.mapcontextmenu.menu.armystats"));
		armystats.setEnabled(false);

		final EventDispatcher ed = aDispatcher;
		final Properties set = settings;
		armystats.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					try {
						new magellan.client.swing.ArmyStatsDialog(new Frame(), ed, data, set,armystatsSel).setVisible(true);
					} catch(Exception exc) {
					}
				}
			});
		add(armystats);
		
    levelSelect = new JMenu(Resources.get("context.mapcontextmenu.menu.levelselect")); 
    levelSelect.setEnabled(false);
    add(levelSelect);
    
    jumpToHotSpot = new JMenu(Resources.get("context.mapcontextmenu.menu.jumptohotspot")); 
    jumpToHotSpot.setEnabled(false);
    add(jumpToHotSpot);
    
		signs = new JMenu(Resources.get("context.mapcontextmenu.menu.signs"));
		add(signs);
		addSeparator();

		tooltips = new JMenu(Resources.get("context.mapcontextmenu.menu.tooltips"));
		tooltips.setEnabled(false);
		add(tooltips);

		renderer = new JMenu(Resources.get("context.mapcontextmenu.menu.renderer"));
		renderer.setEnabled(false);
		add(renderer);
    
		pathFinder = new PathfinderMapContextMenu(dispatcher);
		pathFinder.setEnabled(false);
    add(pathFinder);
    dispatcher.addSelectionListener(pathFinder);
    dispatcher.addGameDataListener(pathFinder);
		
		
    this.initContextMenuProviders();
    
	}

  private void initContextMenuProviders() {
    Collection<MapContextMenuProvider> cmpList = getMapContextMenuProviders();
    if (!cmpList.isEmpty()) {
      addSeparator();
    }
    for (MapContextMenuProvider cmp : cmpList) {
      add(cmp.createContextMenu(dispatcher, data));
      if (this.externalMapContectMenuProvider==null){
        this.externalMapContectMenuProvider = new ArrayList<MapContextMenuProvider>();
      }
      this.externalMapContectMenuProvider.add(cmp);
    }

  }

  /**
   * Searchs for Map Context Menu Providers in the plugins and adds them to the menu.
   */
  private Collection<MapContextMenuProvider> getMapContextMenuProviders() {
    Collection<MapContextMenuProvider> cmpList = new ArrayList<MapContextMenuProvider>();
    for (MagellanPlugIn plugIn : this.client.getPlugIns()) {
      if (plugIn instanceof MapContextMenuProvider) {
        cmpList.add((MapContextMenuProvider)plugIn);
      }
    }
    return cmpList;
  }
  
  
	/**
	 * DOCUMENT-ME
	 *
	 * 
	 * 
	 */
	public void init(Region r, Collection<Region> selectedRegions) {
		this.selectedRegions.clear();
		for(Iterator iter = selectedRegions.iterator(); iter.hasNext(); ) {
			Region reg = (Region) iter.next();
			this.selectedRegions.put((CoordinateID)reg.getID(), reg);
		}
		armystatsSel.clear();
		armystatsSel.addAll(selectedRegions);
		armystatsSel.add(r);
		region = r;
		setLabel(r.toString());
		name.setText(r.toString());
		changeSelState.setEnabled(true);
		copyNameID.setEnabled(true);
		setOriginItem.setEnabled(true);
		changeHotSpot.setEnabled(true);
		armystats.setEnabled(true);
		signs.setEnabled(true);
    updateLevelSelect();
    updateJumpToHotSpot();
		updateSigns();
		
		pathFinder.updateMenu(r);
		
    updateMapContextMenuProvider(r,null);
    
	}

  /**
   * Updates the external provided menues (pLugins)
   * r - the region of known or null
   * c - the CoordinateID if region is not know
   */
  private void updateMapContextMenuProvider(Region r,CoordinateID c){
    if (this.externalMapContectMenuProvider!=null && this.externalMapContectMenuProvider.size()>0){
      for (MapContextMenuProvider plugIn : this.externalMapContectMenuProvider){
        if (r!=null){plugIn.update(r);}
        if (c!=null){plugIn.updateUnknownRegion(c);}
      }
    }
  }
  
  
	/**
	 * Right click on an area without an existing region...
   * the assumed CordinateID is provided
	 */
	public void clear(CoordinateID c) {
		String s = Resources.get("context.mapcontextmenu.menu.noregion");
		setLabel(s);
		name.setText(s);
		changeSelState.setEnabled(false);
		copyNameID.setEnabled(false);
		setOriginItem.setEnabled(false);
		changeHotSpot.setEnabled(false);
		armystats.setEnabled(false);
		signs.setEnabled(false);
    pathFinder.setEnabled(false);
    
    this.updateMapContextMenuProvider(null,c);
    
	}

  /**
   * Updates the level selector
   *
   */
  private void updateLevelSelect(){
    levelSelect.removeAll();
    if (this.source.getLevels().size()>1){
      levelSelect.setEnabled(true);
      for (Iterator iter=this.source.getLevels().iterator();iter.hasNext();){
        Integer actLevel = (Integer)iter.next();
        JMenuItem levelSign = new JMenuItem(actLevel.toString());
        levelSign.setActionCommand(actLevel.toString());
        if (actLevel.intValue()!=this.source.getLevel()){
          levelSign.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
              MapperPanel mp = (MapperPanel)client.getDesktop().getManagedComponents().get("MAP");
              mp.setLevel(Integer.parseInt(e.getActionCommand()));
            }
          });
        } else {
//          levelSign.setEnsabled(false);
        }
        levelSelect.add(levelSign);
      }
    } else {
      levelSelect.setEnabled(false);
    }
  }
  
  /**
   * Updates the level selector
   *
   */
  private void updateJumpToHotSpot(){
    jumpToHotSpot.removeAll();
    if (data!=null && data.hotSpots()!=null && data.hotSpots().size()>0){
      jumpToHotSpot.setEnabled(true);
      for (Iterator iter = data.hotSpots().values().iterator(); iter.hasNext();) {
        HotSpot h = (HotSpot) iter.next();
        JMenuItem levelSign = new JMenuItem(h.getName());
        levelSign.setActionCommand(h.getID().toString());
        levelSign.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            MapperPanel mp = (MapperPanel)client.getDesktop().getManagedComponents().get("MAP");
            ID id = IntegerID.create(e.getActionCommand());
            HotSpot h = data.getHotSpot(id);
            if (h!=null){
              mp.showHotSpot(h);
            } else {
              MapContextMenu.log.error("Hotspot not found: " + e.getActionCommand());
            }
          }
        });
        
        jumpToHotSpot.add(levelSign);
      }
    } else {
      jumpToHotSpot.setEnabled(false);
    }
  }
  
	/**
	 * sets the option (submenuentries) in the signmenu
	 * depends on status of signs of actual region
	 * Fiete
	 *
	 */
	private void updateSigns(){
		signs.removeAll();
		// add or delete
		if (region.getSigns()!=null && region.getSigns().size()>0){
			JMenuItem delSign = new JMenuItem(Resources.get("context.mapcontextmenu.menu.signs.selsign"));
			delSign.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						delSign();
					}
				});
			signs.add(delSign);
		} else {
			JMenuItem delSign = new JMenuItem(Resources.get("context.mapcontextmenu.menu.signs.addsign"));
			delSign.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						addSign();
					}
				});
			signs.add(delSign);
		}
		
		// remove all
		JMenuItem delAllSigns = new JMenuItem(Resources.get("context.mapcontextmenu.menu.signs.selallsigns"));
		delAllSigns.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				delAllSigns();
			}
		});
		signs.add(delAllSigns);
	}
	
	
	
	/**
	 * deletes all signs of the actual region
	 *
	 */
	private void delSign(){
		region.clearSigns();
		updateMap();
	}
	
	/**
	 * deletes all signs of the actual gamedata (CR)
	 *
	 */
	private void delAllSigns(){
		for (Iterator iter = region.getData().regions().values().iterator();iter.hasNext();){
			((Region)iter.next()).clearSigns();
		}
		updateMap();
	}
	
	/**
	 * fires gamedatachanged to refresh map (and everything..;-))
	 *
	 */
	private void updateMap(){
		dispatcher.fire(new GameDataEvent(this,region.getData()));
	}
	
	
	/**
	 * adds a new sign - using the AddSignDialog
	 *
	 */
	private void addSign(){
		AddSignDialog addSignDialog = new AddSignDialog(client,true,settings,dispatcher,region);
		addSignDialog.setVisible(true);
	}
	
	/**
	 * DOCUMENT-ME
	 *
	 * 
	 */
	public void updateTooltips(Mapper source) {
		this.source = source;
		tooltips.removeAll();

		Iterator it = source.getAllTooltipDefinitions().iterator();

		while(it.hasNext()) {
			String name = (String) it.next();
			String tip = (String) it.next();
			String s = name + ": " + tip;

			if(s.length() > 25) {
				s = s.substring(0, 23) + "...";
			}

			JMenuItem item = new JMenuItem(s);
			item.addActionListener(tListener);
			item.putClientProperty(MapContextMenu.TKEY, tip);
			tooltips.add(item);
		}

		tooltips.setEnabled(tooltips.getItemCount() > 0);
	}

	/**
	 * DOCUMENT-ME
	 *
	 * 
	 */
	public void updateRenderers(Mapper source) {
		this.source = source;
		renderer.removeAll();

		// add renderers that are context changeable
		boolean added = false;

		for (RenderingPlane rp : source.getPlanes()) {
      if (rp == null) {
        continue;
      } 
			MapCellRenderer r = rp.getRenderer();
			if((r != null) && (r instanceof ContextChangeable)) {
				JMenuItem mi = ((ContextChangeable) r).getContextAdapter();

				if(mi instanceof JMenu) {
					renderer.add(mi);
				} else {
					JMenu help = new JMenu(r.getName());
					help.add(mi);
					renderer.add(help);
				}

				((ContextChangeable) r).setContextObserver(this);
				added = true;
			}
		}

		// add renderer choosers
		if(added) {
			renderer.addSeparator();
		}

    for (RenderingPlane rp : source.getPlanes()) {
      if (rp == null) {
        continue;
      } 
      JMenu help = new JMenu(rp.getName());
			Collection rs = source.getRenderers(rp.getIndex());
			boolean addedi = false;

			if(rs != null) {
				addedi = true;

				JMenuItem item = new JMenuItem(Resources.get("context.mapcontextmenu.menu.renderer.none"));
				item.setEnabled(rp.getRenderer() != null);
				item.putClientProperty(MapContextMenu.RKEY, new Integer(rp.getIndex()));
				item.addActionListener(rListener);
				help.add(item);

				Iterator it2 = rs.iterator();

				while(it2.hasNext()) {
					MapCellRenderer mcp = (MapCellRenderer) it2.next();
					item = new JMenuItem(mcp.getName());
					item.setEnabled(mcp != rp.getRenderer());
					item.addActionListener(rListener);
					item.putClientProperty(MapContextMenu.RKEY, mcp);
					help.add(item);
				}
			}

			help.setEnabled(addedi);
			renderer.add(help);
		}

		renderer.setEnabled(true);
	}

	/**
	 * DOCUMENT-ME
	 *
	 * 
	 */
	public void setGameData(GameData d) {
		data = d;
	}

	/**
	 * Changes the selection state of the region
	 */
	private void changeSelectionState() {
		if(selectedRegions.containsValue(region)) {
			selectedRegions.remove(region.getID());
		} else {
			selectedRegions.put((CoordinateID)region.getID(), region);
		}

		data.setSelectedRegionCoordinates(selectedRegions);
		dispatcher.fire(new SelectionEvent<Region>(this, selectedRegions.values(), null, SelectionEvent.ST_REGIONS));
	}

	/**
	 * Copies name and coordinates to the sytem clipboard.
	 */
	private void copyNameID() {
    String toCopy = region.toString();
    if (region.getUID()>0){
      toCopy += " (" + Integer.toString((int)region.getUID(),36).replace("l", "L") + ")";
    }
		StringSelection strSel = new StringSelection(toCopy);
    
		Clipboard cb = getToolkit().getSystemClipboard();
		cb.setContents(strSel, null);
	}


	/**
	 * Sets or delets an hotspot
	 */
	private void changeHotSpot() {
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		Map hotspots = data.hotSpots();
		boolean found = false;

		for(Iterator iter = hotspots.values().iterator(); iter.hasNext() && !found;) {
			HotSpot h = (HotSpot) iter.next();

			if(h.getCenter().equals(region.getCoordinate())) {
				found = true;
				data.removeHotSpot(h.getID());
			}
		}

		if(!found) {
			ID id;

			while(true) {
				id = IntegerID.create((int) (Math.random() * Integer.MAX_VALUE));

				if(data.getHotSpot(id) == null) {
					break;
				}
			}

			HotSpot h = MagellanFactory.createHotSpot(id);
			h.setCenter(region.getID());
			h.setName(region.toString());
			data.hotSpots().put(id, h);
		}

		dispatcher.fire(new GameDataEvent(this, data));
		setCursor(Cursor.getDefaultCursor());
	}

	/**
	 * DOCUMENT-ME
	 */
	public void contextDataChanged() {
		if(source != null) {
			Mapper.setRenderContextChanged(true);
			source.repaint();
		}
	}

	protected class TooltipActionListener implements ActionListener {
		/**
		 * DOCUMENT-ME
		 *
		 * 
		 */
		public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
			if((source != null) && (actionEvent.getSource() instanceof JMenuItem)) {
				JMenuItem src = (JMenuItem) actionEvent.getSource();
				Object obj = src.getClientProperty(MapContextMenu.TKEY);

				if(obj == null) {
					return;
				}

				source.setTooltipDefinition(obj.toString());
			}
		}
	}

	protected class RendererActionListener implements ActionListener {
		/**
		 * DOCUMENT-ME
		 *
		 * 
		 */
		public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
			if((source != null) && (actionEvent.getSource() instanceof JMenuItem)) {
				JMenuItem src = (JMenuItem) actionEvent.getSource();

				try {
					Object obj = src.getClientProperty(MapContextMenu.RKEY);

					if(obj == null) {
						return;
					}

					if(obj instanceof MapCellRenderer) {
						MapCellRenderer mcp = (MapCellRenderer) obj;
						source.setRenderer(mcp);
					} else if(obj instanceof Integer) {
						source.setRenderer(null, ((Integer) obj).intValue());
					}

					Mapper.setRenderContextChanged(true);
					source.repaint();
				} catch(Exception exc) {
				}
			}
		}
	}
}
